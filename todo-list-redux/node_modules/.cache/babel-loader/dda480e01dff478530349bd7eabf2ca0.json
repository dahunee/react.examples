{"ast":null,"code":"import _defineProperty from \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { Map, List } from 'immutable';\nimport { handleActions, createAction } from 'redux-actions'; // 액션 타입 정의\n\nvar INSERT = 'todos/INSERT';\nvar TOGGLE = 'todos/TOGGLE';\nvar REMOVE = 'todos/REMOVE'; // 액션 생성 함수\n\nexport var insert = createAction(INSERT);\nexport var toggle = createAction(TOGGLE);\nexport var remove = createAction(REMOVE); // 리듀서 초기상태 정의\n\nvar initialState = List([Map({\n  id: 0,\n  text: '리액트 공부하기',\n  done: true\n}), Map({\n  id: 1,\n  text: '컴포넌트 스타일링 해보기',\n  done: false\n})]); //리듀서\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, INSERT, function (state, action) {\n  /* payload 안에 있는 id, text, done의 레퍼런스를 만들어 줍니다.\r\n     레퍼런스를 만들지 않고, 바로 push(Map(action.payload))를 해도 되지만,\r\n     나중에 이 코드를 보았을 때, 이 액션이 어떤 데이터를 처리하는지 쉽게 볼 수 있도록 하는 작업입니다. \r\n  */\n  var _action$payload = action.payload,\n      id = _action$payload.id,\n      text = _action$payload.text,\n      done = _action$payload.done;\n  return state.push(Map({\n    id: id,\n    text: text,\n    done: done\n  }));\n}), _defineProperty(_handleActions, TOGGLE, function (state, action) {\n  var index = action.payload; // = const index = action.payload;\n\n  /* 비구조화 할당으로 index 레퍼런스에 action.payload 값을 넣습니다.\r\n     이 작업이 필수는 아니지만, 나중에 이 코드를 보았을 때 여기에서 payload가 어떤 값을\r\n     의미하는지 쉽게 이해할 수 있습니다\r\n  */\n  // updateIn으로 현재 값을 참조하여 반대 값으로 설정합니다.\n\n  return state.updateIn([index, 'done'], function (done) {\n    return !done;\n  });\n  /* updateIn을 사용하지 않는다면 다음과 같이 작성할 수도 있습니다.\r\n     return state.setIn([index, 'done'], !state.getIn([0, index]));\r\n     어떤 코드가 더 편해보이나요? 둘 중에 여러분 맘에 드는 코드로 작성하면 됩니다.\r\n  */\n}), _defineProperty(_handleActions, REMOVE, function (state, action) {\n  var index = action.payload.index;\n  return state.delete(index);\n}), _handleActions), initialState);","map":{"version":3,"sources":["C:\\Node React\\React_Velopert\\todo-list-redux\\src\\modules\\todos.js"],"names":["Map","List","handleActions","createAction","INSERT","TOGGLE","REMOVE","insert","toggle","remove","initialState","id","text","done","state","action","payload","push","index","updateIn","delete"],"mappings":";;;;AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,WAA1B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C,C,CAEA;;AACA,IAAMC,MAAM,GAAG,cAAf;AACA,IAAMC,MAAM,GAAG,cAAf;AACA,IAAMC,MAAM,GAAG,cAAf,C,CAEA;;AACA,OAAO,IAAMC,MAAM,GAAGJ,YAAY,CAACC,MAAD,CAA3B;AACP,OAAO,IAAMI,MAAM,GAAGL,YAAY,CAACE,MAAD,CAA3B;AACP,OAAO,IAAMI,MAAM,GAAGN,YAAY,CAACG,MAAD,CAA3B,C,CAEP;;AACA,IAAMI,YAAY,GAAGT,IAAI,CAAC,CACtBD,GAAG,CAAC;AACAW,EAAAA,EAAE,EAAE,CADJ;AAEAC,EAAAA,IAAI,EAAE,UAFN;AAGAC,EAAAA,IAAI,EAAE;AAHN,CAAD,CADmB,EAMtBb,GAAG,CAAC;AACAW,EAAAA,EAAE,EAAE,CADJ;AAEAC,EAAAA,IAAI,EAAE,eAFN;AAGAC,EAAAA,IAAI,EAAE;AAHN,CAAD,CANmB,CAAD,CAAzB,C,CAaA;;AACA,eAAeX,aAAa,uDACvBE,MADuB,EACd,UAACU,KAAD,EAAQC,MAAR,EAAmB;AACzB;;;;AADyB,wBAKEA,MAAM,CAACC,OALT;AAAA,MAKjBL,EALiB,mBAKjBA,EALiB;AAAA,MAKbC,IALa,mBAKbA,IALa;AAAA,MAKPC,IALO,mBAKPA,IALO;AAOzB,SAAOC,KAAK,CAACG,IAAN,CAAWjB,GAAG,CAAC;AAClBW,IAAAA,EAAE,EAAFA,EADkB;AAElBC,IAAAA,IAAI,EAAJA,IAFkB;AAGlBC,IAAAA,IAAI,EAAJA;AAHkB,GAAD,CAAd,CAAP;AAKH,CAbuB,mCAcvBR,MAduB,EAcd,UAACS,KAAD,EAAQC,MAAR,EAAmB;AAAA,MACRG,KADQ,GACEH,MADF,CACjBC,OADiB,EAEzB;;AACA;;;;AAID;;AACA,SAAOF,KAAK,CAACK,QAAN,CAAe,CAACD,KAAD,EAAQ,MAAR,CAAf,EAAgC,UAAAL,IAAI;AAAA,WAAI,CAACA,IAAL;AAAA,GAApC,CAAP;AACA;;;;AAIF,CA3BuB,mCA4BvBP,MA5BuB,EA4Bd,UAACQ,KAAD,EAAQC,MAAR,EAAmB;AAAA,MACjBG,KADiB,GACPH,MAAM,CAACC,OADA,CACjBE,KADiB;AAGzB,SAAOJ,KAAK,CAACM,MAAN,CAAaF,KAAb,CAAP;AACH,CAhCuB,oBAiCzBR,YAjCyB,CAA5B","sourcesContent":["import { Map, List } from 'immutable';\r\nimport { handleActions, createAction } from 'redux-actions';\r\n\r\n// 액션 타입 정의\r\nconst INSERT = 'todos/INSERT';\r\nconst TOGGLE = 'todos/TOGGLE';\r\nconst REMOVE = 'todos/REMOVE';\r\n\r\n// 액션 생성 함수\r\nexport const insert = createAction(INSERT);\r\nexport const toggle = createAction(TOGGLE);\r\nexport const remove = createAction(REMOVE);\r\n\r\n// 리듀서 초기상태 정의\r\nconst initialState = List([\r\n    Map({\r\n        id: 0,\r\n        text: '리액트 공부하기',\r\n        done: true\r\n    }),\r\n    Map({\r\n        id: 1,\r\n        text: '컴포넌트 스타일링 해보기',\r\n        done: false\r\n    })\r\n]);\r\n\r\n//리듀서\r\nexport default handleActions({\r\n    [INSERT]: (state, action) => {\r\n        /* payload 안에 있는 id, text, done의 레퍼런스를 만들어 줍니다.\r\n           레퍼런스를 만들지 않고, 바로 push(Map(action.payload))를 해도 되지만,\r\n           나중에 이 코드를 보았을 때, 이 액션이 어떤 데이터를 처리하는지 쉽게 볼 수 있도록 하는 작업입니다. \r\n        */\r\n        const { id, text, done } = action.payload;\r\n\r\n        return state.push(Map({\r\n            id,\r\n            text,\r\n            done\r\n        }));\r\n    },\r\n    [TOGGLE]: (state, action) => {\r\n        const { payload: index } = action;\r\n        // = const index = action.payload;\r\n        /* 비구조화 할당으로 index 레퍼런스에 action.payload 값을 넣습니다.\r\n           이 작업이 필수는 아니지만, 나중에 이 코드를 보았을 때 여기에서 payload가 어떤 값을\r\n           의미하는지 쉽게 이해할 수 있습니다\r\n        */\r\n       // updateIn으로 현재 값을 참조하여 반대 값으로 설정합니다.\r\n       return state.updateIn([index, 'done'], done => !done);\r\n       /* updateIn을 사용하지 않는다면 다음과 같이 작성할 수도 있습니다.\r\n          return state.setIn([index, 'done'], !state.getIn([0, index]));\r\n          어떤 코드가 더 편해보이나요? 둘 중에 여러분 맘에 드는 코드로 작성하면 됩니다.\r\n       */\r\n    },\r\n    [REMOVE]: (state, action) => {\r\n        const { index } = action.payload;\r\n        \r\n        return state.delete(index);\r\n    }\r\n}, initialState)"]},"metadata":{},"sourceType":"module"}