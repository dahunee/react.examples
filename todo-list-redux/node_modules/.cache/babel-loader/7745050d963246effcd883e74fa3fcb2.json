{"ast":null,"code":"import _classCallCheck from \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Node React\\\\React_Velopert\\\\todo-list-redux\\\\src\\\\containers\\\\TodoInputContainer.js\";\nimport React, { Component } from 'react';\nimport TodoInput from '../components/TodoInput';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux'; // 액션 생성 함수들을 한꺼번에 불러옵니다.\n\nimport * as inputActions from '../modules/input';\nimport * as todosActions from '../modules/todos';\n\nvar TodoInputContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TodoInputContainer, _Component);\n\n  function TodoInputContainer() {\n    _classCallCheck(this, TodoInputContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TodoInputContainer).apply(this, arguments));\n  }\n\n  _createClass(TodoInputContainer, [{\n    key: \"render\",\n    // id = 1\n    // getId = () => {\n    //     return ++this.id;\n    // }\n    // handleChange = (e) => {\n    //     const { value } = e.target;\n    //     const { InputActions } = this.props;\n    //     InputActions.setInput(value);\n    // }\n    // handleInsert = () => {\n    //     const { InputActions, TodosActions, value } = this.props;\n    //     const todo = {\n    //         id: this.getId(),\n    //         text: value,\n    //         done: false\n    //     };\n    //     TodosActions.insert(todo);\n    //     InputActions.setInput('');\n    // }\n    value: function render() {\n      // const { value } = this.props;\n      // const { handleChange, handleInsert } = this;        \n      return React.createElement(TodoInput // onChange={handleChange}\n      // onInsert={handleInsert}\n      // value={value}\n      , {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TodoInputContainer;\n}(Component);\n/* 이번에는 mapStateToProps와 mapDispatchToProps 함수에 대한 레퍼런스를\r\n   따로 만들지 않고, 그 내부에 바로 정의해 주었습니다.\r\n*/\n\n\nexport default connect(function (state) {\n  return {\n    value: state.input.get('value')\n  };\n}, function (dispatch) {\n  return {\n    /* bindActionCreators를 사용하면 자동으로 다음 작업들을 합니다.\r\n    {\r\n        actionCreator: (...params) => dispatch(actionCreator(...params))\r\n    }\r\n    그래서 이전에 우리가 했던 것처럼 일일이 dispatch할 필요가 없습니다.\r\n    예를 들어 InputActions에는 다음 작업이 되어 있는 것이죠.\r\n    InputActions: {\r\n        setInput: (value) => dispatch(inputActions.setInput(value))\r\n    }\r\n    나중에 이를 호출할 때는 this.props.InputActions.setInput을 호출하면 됩니다.\r\n    */\n    InputActions: bindActionCreators(inputActions, dispatch),\n    TodosActions: bindActionCreators(todosActions, dispatch)\n  };\n})(TodoInputContainer);","map":{"version":3,"sources":["C:\\Node React\\React_Velopert\\todo-list-redux\\src\\containers\\TodoInputContainer.js"],"names":["React","Component","TodoInput","connect","bindActionCreators","inputActions","todosActions","TodoInputContainer","state","value","input","get","dispatch","InputActions","TodosActions"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC,C,CAEA;;AACA,OAAO,KAAKC,YAAZ,MAA8B,kBAA9B;AACA,OAAO,KAAKC,YAAZ,MAA8B,kBAA9B;;IAEMC,kB;;;;;;;;;;;;;AACF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;6BAES;AACL;AACA;AACA,aACI,oBAAC,SAAD,CACI;AACA;AACA;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH;;;;EAjC4BN,S;AAoCjC;;;;;AAGA,eAAeE,OAAO,CAClB,UAACK,KAAD;AAAA,SAAY;AACRC,IAAAA,KAAK,EAAED,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgB,OAAhB;AADC,GAAZ;AAAA,CADkB,EAIlB,UAACC,QAAD;AAAA,SAAe;AACX;;;;;;;;;;;AAWAC,IAAAA,YAAY,EAAET,kBAAkB,CAACC,YAAD,EAAeO,QAAf,CAZrB;AAaXE,IAAAA,YAAY,EAAEV,kBAAkB,CAACE,YAAD,EAAeM,QAAf;AAbrB,GAAf;AAAA,CAJkB,CAAP,CAmBbL,kBAnBa,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport TodoInput from '../components/TodoInput';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n// 액션 생성 함수들을 한꺼번에 불러옵니다.\r\nimport * as inputActions from '../modules/input';\r\nimport * as todosActions from '../modules/todos';\r\n\r\nclass TodoInputContainer extends Component {\r\n    // id = 1\r\n    // getId = () => {\r\n    //     return ++this.id;\r\n    // }\r\n\r\n    // handleChange = (e) => {\r\n    //     const { value } = e.target;\r\n    //     const { InputActions } = this.props;\r\n    //     InputActions.setInput(value);\r\n    // }\r\n\r\n    // handleInsert = () => {\r\n    //     const { InputActions, TodosActions, value } = this.props;\r\n    //     const todo = {\r\n    //         id: this.getId(),\r\n    //         text: value,\r\n    //         done: false\r\n    //     };\r\n    //     TodosActions.insert(todo);\r\n    //     InputActions.setInput('');\r\n    // }\r\n\r\n    render() {\r\n        // const { value } = this.props;\r\n        // const { handleChange, handleInsert } = this;        \r\n        return (\r\n            <TodoInput\r\n                // onChange={handleChange}\r\n                // onInsert={handleInsert}\r\n                // value={value}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n/* 이번에는 mapStateToProps와 mapDispatchToProps 함수에 대한 레퍼런스를\r\n   따로 만들지 않고, 그 내부에 바로 정의해 주었습니다.\r\n*/\r\nexport default connect(\r\n    (state) => ({\r\n        value: state.input.get('value')\r\n    }),\r\n    (dispatch) => ({\r\n        /* bindActionCreators를 사용하면 자동으로 다음 작업들을 합니다.\r\n        {\r\n            actionCreator: (...params) => dispatch(actionCreator(...params))\r\n        }\r\n        그래서 이전에 우리가 했던 것처럼 일일이 dispatch할 필요가 없습니다.\r\n        예를 들어 InputActions에는 다음 작업이 되어 있는 것이죠.\r\n        InputActions: {\r\n            setInput: (value) => dispatch(inputActions.setInput(value))\r\n        }\r\n        나중에 이를 호출할 때는 this.props.InputActions.setInput을 호출하면 됩니다.\r\n        */\r\n        InputActions: bindActionCreators(inputActions, dispatch),\r\n        TodosActions: bindActionCreators(todosActions, dispatch)\r\n    })\r\n)(TodoInputContainer);\r\n"]},"metadata":{},"sourceType":"module"}